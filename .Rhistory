install.packages("~/Downloads/ElemStatLearn_2015.6.26.2.tar", repos = NULL)
install.packages("~/Downloads/ElemStatLearn_2015.6.26.2.tar", repos = NULL)
install.packages("~/Downloads/ElemStatLearn_2015.6.26.2.tar", repos = NULL, type = "binary")
install.packages("~/Downloads/ElemStatLearn_2015.6.26.2.tar", repos = NULL, type = "source")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
force(vowel.test)
force(vowel.train)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
model <- train(y ~ ., data = vowel.train, method ="rf", prox = T)
library(caret)
model <- train(y ~ ., data = vowel.train, method ="rf", prox = T)
,
model$finalModel
pred1 <- predict(model, vowel.test)
table(pred1,vowel.test$y)
confusionMatrix(pred1,vowel.test$y)
confusionMatrix(pred1,vowel.test$y)$Accuracy
confusionMatrix(pred1,vowel.test$y)
model_gbm <- train(y ~ ., method = "gbm", data = vowel.train, verbose = F)
pred2 <- predict(model_gbm, vowel.test)
confusionMatrix(pred2,vowel.test$y)
predDF <- data.frame(pred1,pred2, y = vowel.test$y)
View(predDF)
sum(pred1[predDF$pred1 == predDF$pred2] ==
predDF$y[predDF$pred1 == predDF$pred2]) /
sum(predDF$pred1 == predDF$pred2)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
model_rf <- train(diagnosis ~ ., data = training, model = "rf")
model_gbm <- train(diagnosis ~ ., data = training, model = "gbm")
model_lda <- train(diagnosis ~ ., data = training, model = "lda")
predict_rf <- predict(model_rf,testing)
predict_gbm <- predict(model_gbm,testing)
predict_lda <- predict(model_lda,testing)
predict_rf$overall
confusionMatrix(predict_rf,testing$diagnosis)$overall
confusionMatrix(predict_gbm,testing$diagnosis)$overall
confusionMatrix(predict_lda,testing$diagnosis)$overall
predict_all <- data.frame(predict_rf, predict_gbm, predict_lda, diagnosis = testing$diagnosis)
df_all <- data.frame(predict_rf, predict_gbm, predict_lda, diagnosis = testing$diagnosis)
model_all <- train(diagnosis ~ ., method = "rf", data = predict_all)
predict_all <- predict(model_all, df_all)
model_all <- train(diagnosis ~ ., method = "rf", data = predict_all$diagnosis)
model_all <- train(diagnosis ~ ., method = "rf", data = df_all$diagnosis)
model_all <- train(diagnosis ~ ., method = "rf", data = df_all)
predict_all <- predict(model_all, df_all)
confusionMatrix(predict_all,df_all$diagnosis)$overall
confusionMatrix(predict_all,testing$diagnosis)$overall
predict_all <- predict(model_all, df_all)
confusionMatrix(predict_all,testing$diagnosis)$overall
View(df_all)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
model_lasso <- train(CompressiveStrength ~ ., method = "lasso", data = training)
plot.enet
?plot.enet
plot(model_lasso)
plot.enet(model_lasso$finalModel, xvar = "penalty", use.color = T)
library(elasticnet)
plot.enet(model_lasso$finalModel, xvar = "penalty", use.color = T)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
library(lubridate) # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
library(forecast)
?bats
model <- bats(tstrain)
fcast <- forecast(mod_ts, level = 95, h = dim(testing)[1])
fcast <- forecast(model, level = 95, h = dim(testing)[1])
sum(fcast$lower < testing$visitsTumblr & testing$visitsTumblr < fcast$upper) /
dim(testing)[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
install.packages("e1071")
install.packages("e1071")
?e1071
library(e1071)
?e1071
?svm
svm(CompressiveStrength ~ ., data = training)
model <- svm(CompressiveStrength ~ ., data = training)
predict(model, testing$CompressiveStrength)
predict(model, testing)
predict_svm <- predict(model, testing)
library(caret)
confusionMatrix(predict_svm, testing$CompressiveStrength)
confusionMatrix(predict_svm, testing$CompressiveStrength)
confusionMatrix(table(predict_svm, testing$CompressiveStrength))
table(predict_svm, testing$CompressiveStrength)
predict_svm
predict_svm[1]
predict_svm[1,]
accuracy(predict_svm,testing$CompressiveStrength)
library(e1071)
accuracy(predict_svm,testing$CompressiveStrength)
library(AppliedPredictiveModeling)
accuracy(predict_svm,testing$CompressiveStrength)
library(caret)
model <- svm(CompressiveStrength ~ ., data = training)
predict_svm <- predict(model, testing)
accuracy(predict_svm,testing$CompressiveStrength)
library(forecast)
accuracy(predict_svm,testing$CompressiveStrength)
set.seed(325)
training <- read.csv("pml-training.csv")
training <- read.csv("pml-training.csv")
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
library(caret); library(ggplot2); # library()
head(testing)
str(testing)
unique(training$kurtosis_roll_dumbbell)
training$classe
View(testing)
unique(training$classe)
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
testing <- testing(,-unn_vars)
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- testing(,-unn_vars)
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training(,-unn_vars)
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,-unn_vars]
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,-c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")]
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,which(names(training) %in% -unn_vars)]
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,which(names(training) %in% unn_vars)]
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,which(names(training) %in% unn_vars)]
testing <- testing[,which(names(testing) %in% unn_vars)]
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
library(caret); library(ggplot2); # library()
set.seed(24051998)
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,which(names(training) %in% unn_vars)]
testing <- testing[,which(names(testing) %in% unn_vars)]
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,which(names(training) %in% unn_vars)]
testing <- testing[,which(names(testing) %in% unn_vars)]
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
library(caret); library(ggplot2); # library()
set.seed(24051998)
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,-which(names(training) %in% unn_vars)]
testing <- testing[,-which(names(testing) %in% unn_vars)]
pairns(training)
pairs(training)
View(training)
library(janitor)
install.packages("janitor")
library(caret); library(ggplot2); library(janitor)
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,-which(names(training) %in% unn_vars)]
testing <- testing[,-which(names(testing) %in% unn_vars)]
training <- remove_empty(training, which = "cols")
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
library(caret); library(ggplot2); library(janitor)
set.seed(24051998)
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,-which(names(training) %in% unn_vars)]
testing <- testing[,-which(names(testing) %in% unn_vars)]
training <- training[,colSums(is.na(training))<nrow(training)]
View(training)
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,-which(names(training) %in% unn_vars)]
testing <- testing[,-which(names(testing) %in% unn_vars)]
training <- training[,-grep("^var|^avg|^stddev",names(training))]
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
library(caret); library(ggplot2); library(janitor)
set.seed(24051998)
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,-which(names(training) %in% unn_vars)]
testing <- testing[,-which(names(testing) %in% unn_vars)]
training <- training[,-grep("^var",names(training))]
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,-which(names(training) %in% unn_vars)]
testing <- testing[,-which(names(testing) %in% unn_vars)]
training <- training[,-grep("^var",names(training))]
training <- training[,-grep("^avg",names(training))]
View(training)
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
library(caret); library(ggplot2); library(janitor)
set.seed(24051998)
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,-which(names(training) %in% unn_vars)]
testing <- testing[,-which(names(testing) %in% unn_vars)]
training <- training[,-grep("^var",names(training))]
training <- training[,-grep("^avg",names(training))]
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
library(caret); library(ggplot2); library(janitor)
set.seed(24051998)
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,-which(names(training) %in% unn_vars)]
testing <- testing[,-which(names(testing) %in% unn_vars)]
training <- training[,-grep("^var|^std",names(training))]
training <- training[,-grep("^avg",names(training))]
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
library(caret); library(ggplot2); library(janitor)
set.seed(24051998)
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,-which(names(training) %in% unn_vars)]
testing <- testing[,-which(names(testing) %in% unn_vars)]
training <- training[,-grep("^var|^std|^avg|^kurtosis|^skewness",names(training))]
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
library(caret); library(ggplot2); library(janitor)
set.seed(24051998)
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,-which(names(training) %in% unn_vars)]
testing <- testing[,-which(names(testing) %in% unn_vars)]
training <- training[,-grep("^var|^std|^avg|^kurtosis|^skewness|^amplitude",names(training))]
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
library(caret); library(ggplot2); library(janitor)
set.seed(24051998)
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,-which(names(training) %in% unn_vars)]
testing <- testing[,-which(names(testing) %in% unn_vars)]
training <- training[,-grep("^var|^std|^avg|^kurtosis|^skewness|^amplitude|^max|^min",names(training))]
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
library(caret); library(ggplot2); library(janitor)
set.seed(24051998)
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,-which(names(training) %in% unn_vars)]
testing <- testing[,-which(names(testing) %in% unn_vars)]
training <- training[,-grep("^var|^std|^avg|^kurtosis|^skewness|^amplitude|^max|^min",names(training))]
testing <- testing[,-grep("^var|^std|^avg|^kurtosis|^skewness|^amplitude|^max|^min",names(testing))]
head(testing)
head(training)
str(training)
pairs(training)
pairs(training[,-1])
pairs(training[,-c(1,55)])
pairs(training[,-c(1,55)])
training$new_window <- as.factor(training$new_window)
training$classe <- as.factor(training$classe)
testing$new_window <- as.factor(testing$new_window)
head(training)
str(training)
unique(training$classe)
model_rf <- train(classe ~ ., model = "rf", data = training)
model_rf$finalModel
predict_rf <- predict(model_rf,testing)
head(predict_rf)
model_lda <- train(classe ~ ., model = "lda", data = training)
model_lda$finalModel
predict_lda <- predict(model_lda,testing)
head(predict_lda)
model_nb <- train(classe ~ ., model = "nb", data = training)
model_nb$finalModel
predict_nb <- predict(model_nb,testing)
head(predict_nb)
model_gbm <- train(classe ~ ., model = "gbm", data = training)
model_gbm$finalModel
predict_gbm <- predict(model_gbm,testing)
head(predict_gbm)
df_all <- data.frame(predict_rf, predict_lda, predict_nb, predict_gbm, classe = testing$classe)
length(predict_gbm)
length(predict_lda)
length(predict_nb)
length(predict_rf)
View(testing)
testing <- read.csv("pml-testing.csv")
testing <- testing[,-which(names(testing) %in% unn_vars)]
testing <- testing[,-grep("^var|^std|^avg|^kurtosis|^skewness|^amplitude|^max|^min",names(testing))]
testing <- read.csv("pml-testing.csv")
View(testing)
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
testing$
names(testing)
names(testing)
order(names(testing))
sort(names(testing))
sort(names(training))
names(testing) == names(training)
names(testing)
names(trainting)
names(training)
testing$problem_id
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
library(caret); library(ggplot2); library(janitor)
set.seed(24051998)
unn_vars <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","problem_id")
training <- training[,-which(names(training) %in% unn_vars)]
testing <- testing[,-which(names(testing) %in% unn_vars)]
training <- training[,-grep("^var|^std|^avg|^kurtosis|^skewness|^amplitude|^max|^min",names(training))]
testing <- testing[,-grep("^var|^std|^avg|^kurtosis|^skewness|^amplitude|^max|^min",names(testing))]
training$new_window <- as.factor(training$new_window)
training$classe <- as.factor(training$classe)
testing$new_window <- as.factor(testing$new_window)
validation <- createDataPartition(training$classe, p = 0.7, list = F)
training$new_window <- as.factor(training$new_window)
training$classe <- as.factor(training$classe)
testing$new_window <- as.factor(testing$new_window)
inTrain <- createDataPartition(training$classe, p = 0.7, list = F)
training$new_window <- as.factor(training$new_window)
training$classe <- as.factor(training$classe)
testing$new_window <- as.factor(testing$new_window)
inTrain <- createDataPartition(training$classe, p = 0.7, list = F)
training <- training[inTrain,]
validation <- training[-inTrain,]
head(training)
str(training)
unique(training$classe)
model_rf <- train(classe ~ ., model = "rf", data = training)
model_rf$finalModel
predict_rf <- predict(model_rf,testing)
head(predict_rf)
model_lda <- train(classe ~ ., model = "lda", data = training)
model_lda$finalModel
predict_lda <- predict(model_lda,testing)
head(predict_lda)
model_nb <- train(classe ~ ., model = "nb", data = training)
model_nb$finalModel
predict_nb <- predict(model_nb,testing)
head(predict_nb)
model_gbm <- train(classe ~ ., model = "gbm", data = training)
model_gbm$finalModel
predict_gbm <- predict(model_gbm,testing)
head(predict_gbm)
predict_rf <- predict(model_rf, validation)
head(predict_rf)
confusionMatrix(predict_rf, validation$classe)$overall[1]
predict_lda <- predict(model_lda, validation)
head(predict_lda)
confusionMatrix(predict_lda, validation$classe)$overall[1]
confusionMatrix(predict_lda, validation$classe)$overall
length(predict_gbm)
length(predict_lda)
length(predict_nb)
length(predict_rf)
confusionMatrix(predict_rf, validation$classe)$overall
predict_rf <- predict(model_rf, validation)
head(predict_rf)
confusionMatrix(predict_rf, validation$classe)$overall
predict_lda <- predict(model_lda, validation)
head(predict_lda)
confusionMatrix(predict_lda, validation$classe)$overall
length(predict_nb)
predict_nb <- predict(model_nb, validation)
head(predict_nb)
confusionMatrix(predict_nb, validation$classe)$overall[1]
confusionMatrix(predict_nb, validation$classe)$overall
View(model_gbm)
length(predict_gbm)
predict_gbm <- predict(model_gbm, validation)
head(predict_gbm)
confusionMatrix(predict_gbm, validation$classe)$overall[1]
confusionMatrix(predict_gbm, validation$classe)$overall
model_svm <- svm(classe ~ ., data = training)
model_svm$finalModel
model_svm
predict_svm <- predict(model_svm, validation)
head(predict_svm)
confusionMatrix(predict_svm, validation$classe)$overall
df_all <- data.frame(predict_rf, predict_lda, predict_nb, predict_gbm, predict_svm, classe = validation$classe)
model_all <- train(classe ~ ., method = "rf", data = df_all)
model_all$finalModel
predict_all <- predict(model_all, validation)
predict_all <- predict(model_all, validation)
head(predcit_all)
predict_all <- predict(model_all, validation)
head(predict_all)
confusionMatrix(predict_all, validation$classe)
confusionMatrix(predict_all, validation$classe)$overall
predict_test <- predict(model_all,testing)
predict_test
predict_test <- predict(model_all,testing)
head(predict_test)
predict_test <- predict(model_rf,testing)
head(predict_test)
predict_test <- predict(model_rf,testing)
predict_test
plot(model_rf)
plot(model_gbm)
plot(model_lda)
plot(model_nb)
plot(model_svm)
model_svm <- svm(classe ~ ., data = training)
?svm
model_svm
